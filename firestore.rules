rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS: Users can create their own user document, and can only read/write their own.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // POSTS: Anyone can read. Authenticated users can create. Author can update/delete.
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      allow update: if request.auth != null && (
        // Case 1: The user is the author, they can update everything.
        request.auth.uid == resource.data.authorId ||
        // Case 2: Another authenticated user is liking/unliking.
        // We prevent content vandalism by ensuring key fields are not changed.
        (request.resource.data.authorId == resource.data.authorId &&
         request.resource.data.title == resource.data.title &&
         request.resource.data.content == resource.data.content)
      );

      // Rules for the 'likes' subcollection
      match /likes/{userId} {
        allow create, delete: if request.auth != null && request.auth.uid == userId;
        allow read: if request.auth != null && request.auth.uid == userId;
      }
    }

    // SIMPLE-POSTS (Legacy): Anyone can read. Authenticated users can create. Author can update/delete.
    match /simple-posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Note: Legacy posts use 'uid' for author id.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    // SIMPLE-TRAVELS: Anyone can read. Authenticated users can create. Only the author can update/delete.
    match /simple-travels/{travelId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Note: Legacy travels use 'uid' for author id.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    // SPOTS: Anyone can read. Authenticated users can create. Author can update/delete.
    match /spots/{spotId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;

      // Rules for comments on spots
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
  }
}
