rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // Users can create their own profile.
    // They can only read, update, or delete their own profile.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;

      // Bookmarks are private to the user.
      match /bookmarks/{bookmarkId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // POSTS (New format)
    match /posts/{postId} {
      // Allow reading a single document for anyone, so the client can check permissions.
      allow get: if true;
      // Allow listing for anyone, but with a limit to prevent abuse.
      allow list: if request.query.limit <= 100;
      // Authenticated users can create posts.
      allow create: if request.auth != null;
      // Only the author can update or delete their post.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Likes subcollection
      match /likes/{userId} {
        // Anyone can see who liked a post.
        allow read, list: if true;
        // Only the authenticated user can create/delete their own like.
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // SIMPLE-POSTS (Legacy format)
    match /simple-posts/{postId} {
      // Allow reading a single document for anyone, so the client can check permissions.
      allow get: if true;
      // Allow listing for anyone, but with a limit to prevent abuse.
      allow list: if request.query.limit <= 100;
      allow create: if request.auth != null;
      // Only the author can update or delete their post (using legacy 'uid' field).
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;

      match /likes/{userId} {
        allow read, list: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // SIMPLE-TRAVELS (Legacy format)
    match /simple-travels/{travelId} {
      // Travels are public.
      allow read: if true;
      allow create: if request.auth != null;
      // Only the author can update or delete (using legacy 'uid' field).
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
    }

    // SPOTS
    match /spots/{spotId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }
  }
}
